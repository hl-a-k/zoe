<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:rdb="http://www.dangdang.com/schema/ddframe/rdb"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-4.0.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
    http://www.dangdang.com/schema/ddframe/rdb http://www.dangdang.com/schema/ddframe/rdb/rdb.xsd"
       default-lazy-init="false">

    <!-- 定义受环境影响易变的变量 -->
    <context:property-placeholder location="classpath:jdbc.properties" ignore-unresolvable="true"/>

    <context:component-scan base-package="com.zoe.db">
        <!--<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>-->
    </context:component-scan>

    <!-- 数据源配置,使用druid作为连接池 -->
    <bean id="dataSource" name="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
          destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

        <!-- 配置监控统计拦截的filters : mergeStat、stat、log4j、slf4j，去掉后监控界面sql无法统计-->
        <property name="filters" value="stat"/>
        <!--  如果想要获取元数据 REMARKS 信息,Oracle需要添加参数remarksReporting，MySql需要添加参数useInformationSchema -->
        <property name="connectionProperties" value="druid.stat.slowSqlMillis=5000;remarksReporting=true;useInformationSchema=true"/>

        <!-- 初始化连接大小 -->
        <property name="initialSize" value="1"/>
        <!-- 连接池最小空闲 -->
        <property name="minIdle" value="1"/>
        <!-- 连接池最大使用连接数量 -->
        <property name="maxActive" value="100"/>

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000"/>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>

        <property name="validationQuery" value="select 1 from dual"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>
        <property name="testWhileIdle" value="true"/>

        <!-- 配置removeAbandoned对性能会有一些影响，建议怀疑存在泄漏之后再打开。 -->
        <!-- 打开removeAbandoned功能 -->
        <property name="removeAbandoned" value="false"/>
        <!-- 1800秒，也就是30分钟 -->
        <property name="removeAbandonedTimeout" value="1800"/>
        <!-- 关闭abanded连接时输出错误日志 -->
        <property name="logAbandoned" value="true"/>

        <!--如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。分库分表较多的数据库，建议配置为false。-->
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true"/>
        <property name="maxPoolPreparedStatementPerConnectionSize" value="100"/>
    </bean>

    <bean id="db_0" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://localhost:3306/test"/>
        <property name="username" value="root"/>
        <property name="password" value="admin"/>
    </bean>

    <bean id="db_1" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://localhost:3306/test"/>
        <property name="username" value="root"/>
        <property name="password" value="admin"/>
    </bean>

    <!--<rdb:strategy id="databaseStrategy" sharding-columns="log_id" algorithm-expression="db_${log_id.longValue() % 2}"/>-->
    <!--<rdb:strategy id="logTableStrategy" sharding-columns="log_id" algorithm-expression="log_${log_id.longValue() % 2}"/>-->
    <rdb:strategy id="databaseStrategy" sharding-columns="log_id" algorithm-class="com.zoe.framework.dao.algorithm.SingleKeyModuloDatabaseShardingAlgorithm"/>
    <rdb:strategy id="logTableStrategy" sharding-columns="log_id" algorithm-class="com.zoe.framework.dao.algorithm.SingleKeyModuloTableShardingAlgorithm"/>

    <rdb:data-source id="shardingDataSource">
        <rdb:sharding-rule data-sources="db_0,db_1">
            <rdb:table-rules>
                <rdb:table-rule logic-table="log" actual-tables="log_${0..3}" database-strategy="databaseStrategy" table-strategy="logTableStrategy"/>
                <!--<rdb:table-rule logic-table="log" actual-tables="log_0,log_1,log_2,log_3" database-strategy="databaseStrategy" table-strategy="logTableStrategy"/>-->
            </rdb:table-rules>
        </rdb:sharding-rule>
    </rdb:data-source>

    <!-- 事务管理器 : DataSourceTransactionManager -->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!--<property name="dataSource" ref="dataSource"/>-->
        <property name="dataSource" ref="shardingDataSource" />
    </bean>

    <!-- 使用声明式事务 -->
    <tx:annotation-driven transaction-manager="txManager"/>

    <!-- sql2o -->
    <bean id="sql2o" class="com.zoe.framework.sql2o.Sql2o">
        <constructor-arg index="0" type="javax.sql.DataSource" ref="shardingDataSource"/>
        <property name="throwOnMappingFailure" value="false"/>
    </bean>
</beans>
